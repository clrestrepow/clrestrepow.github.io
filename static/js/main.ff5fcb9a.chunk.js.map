{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","titulo","Formulario","ciudad","React","createRef","pais","buscarClima","e","preventDefault","respuesta","_this","current","value","datosConsulta","onSubmit","this","id","ref","type","htmlFor","defaultValue","Component","Error","mensaje","Clima","mostrarResultado","_this$props$resultado","resultado","name","weather","main","urlIcon","concat","icon","alt","temp","toFixed","src","temp_max","temp_min","App","state","error","consulta","consultarApi","_this$state$consulta","url","fetch","then","json","datos","setState","catch","console","log","prevProps","prevState","cod","componentes_Error","componentes_Clima","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAgBeA,EAdA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACXH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,cAAcJ,EAAMM,YCmD/CC,6MArDXC,OAASC,IAAMC,cACfC,KAAOF,IAAMC,cAEbE,YAAc,SAACC,GACXA,EAAEC,iBAEF,IAAMC,EAAY,CACdP,OAAQQ,EAAKR,OAAOS,QAAQC,MAC5BP,KAAMK,EAAKL,KAAKM,QAAQC,OAG5BF,EAAKhB,MAAMmB,cAAcJ,4EAKzB,OACId,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,QAAMiB,SAAUC,KAAKT,aACjBX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,SAAOmB,GAAG,SAASC,IAAKF,KAAKb,OAAQgB,KAAK,SAC1CvB,EAAAC,EAAAC,cAAA,SAAOsB,QAAQ,UAAf,aAEJxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,UAAQoB,IAAKF,KAAKV,MACdV,EAAAC,EAAAC,cAAA,UAAQe,MAAM,GAAGQ,cAAY,GAA7B,oBACAzB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,KAAKQ,cAAY,GAA/B,aACAzB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,KAAKQ,cAAY,GAA/B,YACAzB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,KAAKQ,cAAY,GAA/B,cACAzB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,KAAKQ,cAAY,GAA/B,aACAzB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,KAAKQ,cAAY,GAA/B,iBACAzB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,KAAKQ,cAAY,GAA/B,aACAzB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,KAAKQ,cAAY,GAA/B,SAEJzB,EAAAC,EAAAC,cAAA,SAAOsB,QAAQ,QAAf,WAEJxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACXH,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,SAASpB,UAAU,mDAAmDc,MAAM,0BAzC/FS,aCiBVC,EAjBD,SAAC5B,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACVJ,EAAM6B,aCkChBC,6MAtCXC,iBAAmB,WAAM,IAAAC,EAEShB,EAAKhB,MAAMiC,UAAlCC,EAFcF,EAEdE,KAAMC,EAFQH,EAERG,QAASC,EAFDJ,EAECI,KACtB,IAAKF,IAASC,IAAYC,EAAM,OAAO,KACvC,IACMC,EAAO,oCAAAC,OAAuCH,EAAQ,GAAGI,KAAlD,QACPC,EAAG,YAAAF,OAAeJ,GACxB,OACIjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,iCAAyB+B,GACzBjC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,YACcgC,EAAKK,KAVpB,QAUmCC,QAAQ,GAD1C,SAEIzC,EAAAC,EAAAC,cAAA,OAAKwC,IAAKN,EAASG,IAAKA,KAE5BvC,EAAAC,EAAAC,cAAA,kBAAUiC,EAAKQ,SAbhB,OAaC,UACA3C,EAAAC,EAAAC,cAAA,kBAAUiC,EAAKS,SAdhB,OAcC,uFAShB,OACI5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACViB,KAAKU,2BA/BFJ,aC0FLmB,6MApFbC,MAAQ,CACNC,OAAO,EACPC,SAAU,GACVhB,UAAW,MAUbiB,aAAe,WAAM,IAAAC,EACInC,EAAK+B,MAAME,SAA3BzC,EADY2C,EACZ3C,OAAQG,EADIwC,EACJxC,KACf,IAAIH,IAAWG,EAAM,OAAO,KAE5B,IACIyC,EAAG,qDAAAd,OAAwD9B,EAAxD,KAAA8B,OAAkE3B,EAAlE,WAAA2B,OADO,oCAGde,MAAMD,GACHE,KAAK,SAAAvC,GACJ,OAAOA,EAAUwC,SAElBD,KAAK,SAAAE,GACJxC,EAAKyC,SAAS,CACZxB,UAAWuB,MAGdE,MAAM,SAAAV,GACLW,QAAQC,IAAIZ,QAKlB7B,cAAgB,SAAAJ,GAEY,KAArBA,EAAUP,QAAoC,KAAnBO,EAAUJ,KACtCK,EAAKyC,SAAS,CACZT,OAAO,IAGThC,EAAKyC,SAAS,CACZR,SAAUlC,EACViC,OAAO,uFAtCIa,EAAWC,GACzBA,EAAUb,WAAa5B,KAAK0B,MAAME,UACnC5B,KAAK6B,gDA8CD,IAKFjB,EALEe,EAAQ3B,KAAK0B,MAAMC,MACtBe,EAAO1C,KAAK0B,MAAMd,UAAlB8B,IAeH,OARE9B,EADEe,EACU/C,EAAAC,EAAAC,cAAC6D,EAAD,CAAOnC,QAAQ,gCACX,QAARkC,EACI9D,EAAAC,EAAAC,cAAC6D,EAAD,CAAOnC,QAAQ,yBAEf5B,EAAAC,EAAAC,cAAC8D,EAAD,CAAOhC,UAAWZ,KAAK0B,MAAMd,YAKzChC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC+D,EAAD,CACE5D,OAAO,UAETL,EAAAC,EAAAC,cAACgE,EAAD,CACEhD,cAAiBE,KAAKF,gBAEvBc,UAhFSN,aCKEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.ff5fcb9a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nconst Header = (props) => {\n    return (\n        <div>\n            <nav>\n                <div className=\"nav-wrapper ligth-blue darken-2\">\n                    <a href=\"/\" className=\"brand-logo\">{props.titulo}</a>\n                </div>\n            </nav>\n        </div>\n    )\n}\nHeader.propTypes = {\n    titulo: PropTypes.string.isRequired\n}\nexport default Header;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Formulario extends Component {\n\n    ciudad = React.createRef();\n    pais = React.createRef();\n\n    buscarClima = (e) => {\n        e.preventDefault();\n\n        const respuesta = {\n            ciudad: this.ciudad.current.value,\n            pais: this.pais.current.value,\n        }\n\n        this.props.datosConsulta(respuesta);\n\n    }\n\n    render() { \n        return (\n            <div className=\"contenedor-form\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <form onSubmit={this.buscarClima}>\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\n                                <input id=\"ciudad\" ref={this.ciudad} type=\"text\"/>\n                                <label htmlFor=\"ciudad\">ciudad: </label>\n                            </div>\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\n                                <select ref={this.pais}>\n                                    <option value=\"\" defaultValue>Elige un país</option>\n                                    <option value=\"AR\" defaultValue>Argentina</option>\n                                    <option value=\"CO\" defaultValue>Colombia</option>\n                                    <option value=\"CR\" defaultValue>Costa Rics</option>\n                                    <option value=\"ES\" defaultValue>España</option>\n                                    <option value=\"US\" defaultValue>Estado Unidos</option>\n                                    <option value=\"MX\" defaultValue>México</option>\n                                    <option value=\"PE\" defaultValue>Peru</option>\n                                </select>\n                                <label htmlFor=\"pais\">Pais: </label>\n                            </div>\n                            <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\n                                <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow acennt\" value=\"Buscar...\"/>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n \n\nFormulario.propTypes = {\n    datosConsulta: PropTypes.func.isRequired\n}\nexport default Formulario;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Error = (props) => {\n    return ( \n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col s12 m6 offset-m3\">\n                    <div className=\"card-panel red darken-4 error\">\n                        {props.mensaje}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n \nError.propTypes = {\n    mensaje: PropTypes.string.isRequired\n}\nexport default Error;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Clima extends Component {\n\n    mostrarResultado = () => {\n\n        const {name, weather, main} = this.props.resultado;\n        if (!name || !weather || !main) return null;\n        const kelvin = 273.15;\n        const urlIcon = `https://openweathermap.org/img/w/${weather[0].icon}.png`\n        const alt = `Clima de ${name}`;\n        return(\n            <div className=\"row\">\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\n                    <div className=\"card-panel light-blue align-center\">\n                        <span className=\"white-text\">\n                        <h2>Resultado clima de: {name}</h2>\n                        <p className=\"temperatura\">\n                            Actual: {(main.temp - kelvin).toFixed(2)} &deg;C\n                            <img src={urlIcon} alt={alt}/>\n                        </p>\n                        <p> Max. {main.temp_max - kelvin} &deg;C</p>\n                        <p> Min. {main.temp_min - kelvin} &deg;C</p>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    render() { \n        return (\n            <div className=\"container\">\n                {this.mostrarResultado()}\n            </div>\n        );\n    }\n}\n\nClima.propTypes = {\n    resultado: PropTypes.object.isRequired\n}\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport Error from './componentes/Error'\nimport Clima from './componentes/Clima';\n\n\nclass App extends Component {\n\n  state = {\n    error: false,\n    consulta: {},\n    resultado: {}\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(prevState.consulta !== this.state.consulta) {\n      this.consultarApi();\n    }\n    \n  }\n\n  consultarApi = () => {\n    const {ciudad, pais} = this.state.consulta;\n    if(!ciudad || !pais) return null;\n\n    const appId = '754fcbfa3f9c05b00a5970f9ab42740c';\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`\n\n    fetch(url)\n      .then(respuesta => {\n        return respuesta.json()\n      })\n      .then(datos => {\n        this.setState({\n          resultado: datos\n        })\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n\n  datosConsulta = respuesta => {\n\n      if(respuesta.ciudad === \"\" || respuesta.pais === \"\") {\n        this.setState({\n          error: true\n        })\n      } else {\n        this.setState({\n          consulta: respuesta,\n          error: false\n        })\n      }\n      \n  }\n\n\n\n  render() {\n\n    const error = this.state.error,\n      {cod} = this.state.resultado;\n\n\n\n    let resultado;\n\n    if (error) {\n      resultado = <Error mensaje=\"Los campos son obligatorios\"/>\n    } else if(cod === \"404\") {\n      resultado = <Error mensaje=\"Ciudad no encontrada\"/>\n    } else {\n      resultado = <Clima resultado={this.state.resultado}/>\n    }\n\n\n    return (\n      <div className=\"App\">\n        <Header\n          titulo='Clima'\n        />\n        <Formulario\n          datosConsulta = {this.datosConsulta}\n        />\n        {resultado}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}